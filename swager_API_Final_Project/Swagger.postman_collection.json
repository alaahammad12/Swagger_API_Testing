{
	"info": {
		"_postman_id": "1ea3f615-b077-48f0-acc8-a8e393e52830",
		"name": "Swagger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26462334"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "get all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//Response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"// Assert the value of a specific header\r",
									"pm.test(\"Content-Type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema is correct\", function () {\r",
									"    pm.expect(response[0]).to.has.property('id');\r",
									"    pm.expect(response[0]).to.has.property('title');\r",
									"    pm.expect(response[0]).to.has.property('description');\r",
									"    pm.expect(response[0]).to.has.property('pageCount');\r",
									"    pm.expect(response[0]).to.has.property('excerpt');\r",
									"    pm.expect(response[0]).to.has.property('publishDate');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/{{booksURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{booksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add new book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
									"\r",
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Server is Kestrel\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8; v=1.0\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"pm.test(\"Response schema is correct\", function() {\r",
									"    pm.expect(response.hasOwnProperty('id')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('title')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('description')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('pageCount')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('excerpt')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('publishDate')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON values are correct types\", function () {\r",
									"    pm.expect(typeof(response.id)).to.eql('number');\r",
									"    pm.expect(typeof(response.title)).to.eql('string');\r",
									"    pm.expect(typeof(response.description)).to.eql('string');\r",
									"    pm.expect(typeof(response.pageCount)).to.eql('number');\r",
									"    pm.expect(typeof(response.excerpt)).to.eql('string');\r",
									"     pm.expect(typeof(response.publishDate)).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 201,\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"pageCount\": 0,\r\n  \"excerpt\": \"string\",\r\n  \"publishDate\": \"2024-03-07T18:33:34.630Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/{{booksURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{booksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get book by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//response header\r",
									"pm.test(\"Content-Type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"pm.test(\"Response schema is correct\", function() {\r",
									"     pm.expect(response.hasOwnProperty('id')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('title')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('description')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('pageCount')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('excerpt')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('publishDate')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON values are correct types\", function () {\r",
									"    pm.expect(typeof(response.id)).to.eql('number');\r",
									"    pm.expect(typeof(response.title)).to.eql('string');\r",
									"    pm.expect(typeof(response.description)).to.eql('string');\r",
									"    pm.expect(typeof(response.pageCount)).to.eql('number');\r",
									"    pm.expect(typeof(response.excerpt)).to.eql('string');\r",
									"    pm.expect(typeof(response.publishDate)).to.eql('string');\r",
									"});\r",
									"\r",
									"pm.test(\"corrrect book id\", function () {\r",
									"    pm.expect(response.id).to.eql(4);\r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{booksURL}}/{{getID}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{booksURL}}",
								"{{getID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a specific book by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8; v=1.0\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"pm.test(\"Response schema is correct\", function() {\r",
									"    pm.expect(response.hasOwnProperty('id')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('title')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('description')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('pageCount')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('excerpt')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('publishDate')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON values are correct types\", function () {\r",
									"    pm.expect(typeof(response.id)).to.eql('number');\r",
									"    pm.expect(typeof(response.title)).to.eql('string');\r",
									"    pm.expect(typeof(response.description)).to.eql('string');\r",
									"    pm.expect(typeof(response.pageCount)).to.eql('number');\r",
									"    pm.expect(typeof(response.excerpt)).to.eql('string');\r",
									"     pm.expect(typeof(response.publishDate)).to.eql('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if pageCount =200\", function () {\r",
									"    pm.expect(response.pageCount).to.eql(230);\r",
									"});\r",
									"\r",
									"pm.test(\"check the description of bookID 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.description).to.eql(\"Lorem lorem lorem. Lorem lorem lorem\");\r",
									"});\r",
									"\r",
									"pm.test(\"check the excerpt of bookID 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.excerpt).to.eql(\"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\");\r",
									"});\r",
									"\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"id\": 2,\r\n        \"title\": \"Book \",\r\n        \"description\": \"Lorem lorem lorem. Lorem lorem lorem\",\r\n        \"pageCount\": 230,\r\n        \"excerpt\": \"Lorem lorem lorem. Lorem lorem lorem. Lorem lorem lorem.\",\r\n        \"publishDate\": \"2024-03-08T17:07:37.5239155+00:00\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/{{booksURL}}/{{editID}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{booksURL}}",
								"{{editID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Server is Kestrel\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									"\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Body message is empty\", function () {\r",
									"    pm.response.to.have.body('');\r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{booksURL}}/{{deleteID}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{booksURL}}",
								"{{deleteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get updated books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test('Content-Type is \\'application/json\\'', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response body is a JSON', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})\r",
									"\r",
									"pm.test(\"Response schema is correct\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response[0]).to.have.property('id');\r",
									"    pm.expect(response[0]).to.have.property('title');\r",
									"    pm.expect(response[0]).to.have.property('description');\r",
									"    pm.expect(response[0]).to.have.property('pageCount');\r",
									"    pm.expect(response[0]).to.have.property('excerpt');\r",
									"    pm.expect(response[0]).to.have.property('publishDate');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{booksURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{booksURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//Response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"// Assert the value of a specific header\r",
									"pm.test(\"Content-Type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema is correct\", function () {\r",
									"    \r",
									"    pm.expect(response[0]).to.has.property('id');\r",
									"    pm.expect(response[0]).to.has.property('userName');\r",
									"    pm.expect(response[0]).to.has.property('password');\r",
									"  \r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{userURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{userURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
									"\r",
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Server is Kestrel\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8; v=1.0\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"pm.test(\"Response schema is correct\", function() {\r",
									"    pm.expect(response.hasOwnProperty('id')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('userName')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('password')).to.be.true;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"JSON values are correct types\", function () {\r",
									"    pm.expect(typeof(response.id)).to.eql('number');\r",
									"    pm.expect(typeof(response.userName)).to.eql('string');\r",
									"    pm.expect(typeof(response.password)).to.eql('string');\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":11,\r\n  \"userName\": \"string\",\r\n  \"password\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/{{userURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{userURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit a specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
									"\r",
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Server is Kestrel\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8; v=1.0\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"user change first name to be user2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userName).to.eql(\"User 2\");\r",
									"});\r",
									"\r",
									"pm.test(\"user change password to be passwordd2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.password).to.eql(\"Passwordd2\");\r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 2,\r\n        \"userName\": \"User 2\",\r\n        \"password\": \"Passwordd2\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/{{userURL}}/2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{userURL}}",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"})\r",
									"\r",
									"pm.test('Content-Type is \\'application/json\\'', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response body is a JSON', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"})\r",
									"\r",
									"pm.test(\"check id equal to 2\", function () {\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('check password equal Password2', function () {\r",
									"    pm.expect(response.password).to.eql('Password2');\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{userURL}}/{{getIDUser}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{userURL}}",
								"{{getIDUser}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auther",
			"item": [
				{
					"name": "get all auther",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//Response status\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"// Assert the value of a specific header\r",
									"pm.test(\"Content-Type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema is correct\", function () {\r",
									"    pm.expect(response[0]).to.has.property('id');\r",
									"    pm.expect(response[0]).to.has.property('idBook');\r",
									"    pm.expect(response[0]).to.has.property('firstName');\r",
									"    pm.expect(response[0]).to.has.property('lastName');\r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{autherURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{autherURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add auther to specific book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
									"\r",
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Server is Kestrel\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8; v=1.0\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"pm.test(\"Response schema is correct\", function() {\r",
									"    pm.expect(response.hasOwnProperty('id')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('idBook')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('firstName')).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty('lastName')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON values are correct types\", function () {\r",
									"    pm.expect(typeof(response.id)).to.eql('number');\r",
									"    pm.expect(typeof(response.idBook)).to.eql('number');\r",
									"    pm.expect(typeof(response.firstName)).to.eql('string');\r",
									"    pm.expect(typeof(response.lastName)).to.eql('string');\r",
									"});\r",
									"\r",
									"pm.test(\"check firstname equal to First Name 1\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(\"First Name 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"check lastname equal to Last Name 1\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Last Name 1\");\r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 234,\r\n        \"idBook\": 1,\r\n        \"firstName\": \"First Name 1\",\r\n        \"lastName\": \"Last Name 1\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/{{autherURL}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{autherURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "change auther",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
									"\r",
									"//Response status\r",
									"pm.test('Status code is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Server is Kestrel\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									"\r",
									"//Response headers\r",
									"pm.test(\"Header Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8; v=1.0\");\r",
									"});\r",
									"\r",
									"//Response body\r",
									"pm.test(\"Response body is a JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"auther first name change\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql(\"First 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"auther first name change\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Last  1\");\r",
									"});\r",
									"\r",
									"//Performance\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 1,\r\n        \"idBook\": 1,\r\n        \"firstName\": \"First 1\",\r\n        \"lastName\": \"Last  1\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/{{autherURL}}/{{IDPutAuther}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{autherURL}}",
								"{{IDPutAuther}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove auther",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/{{autherURL}}/590",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"{{autherURL}}",
								"590"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Status code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		}
	]
}